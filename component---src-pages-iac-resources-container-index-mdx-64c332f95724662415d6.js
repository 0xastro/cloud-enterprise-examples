(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{srBq:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return m}));n("91GP"),n("rGqo"),n("yt8O"),n("Btvt"),n("RW0V"),n("q1tI");var a=n("7ljp"),r=n("013z");n("qKvR");function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var o={},s=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),Object(a.b)("div",t)}},c=s("PageDescription"),l=s("AnchorLinks"),b=s("AnchorLink"),u={_frontmatter:o},p=r.a;function m(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(a.b)(p,i({},u,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)(c,{mdxType:"PageDescription"},Object(a.b)("p",null,"Automating the management of the IBM Container Registry to store the Docker images and build Kubernetes clusters (IKS)")),Object(a.b)(l,{small:!0,mdxType:"AnchorLinks"},Object(a.b)(b,{mdxType:"AnchorLink"},"IBM Cloud Container Registry"),Object(a.b)(b,{mdxType:"AnchorLink"},"Docker push & pull"),Object(a.b)(b,{mdxType:"AnchorLink"},"IBM Cloud Kubernetes Service"),Object(a.b)(b,{mdxType:"AnchorLink"},"IKS with Terraform"),Object(a.b)(b,{mdxType:"AnchorLink"},"IKS with IBM Cloud Schematics"),Object(a.b)(b,{mdxType:"AnchorLink"},"Deploy the Application"),Object(a.b)(b,{mdxType:"AnchorLink"},"Final Code"),Object(a.b)(b,{mdxType:"AnchorLink"},"Clean up")),Object(a.b)("h2",null,"IBM Cloud Container Registry"),Object(a.b)("p",null,"IBM Cloud Container Registry (ICR) is used to store, manage and deploy private container images in a highly available and scalable architecture. You can also set up your own image namespace and push container images to them. To know more, read the ",Object(a.b)("a",i({parentName:"p"},{href:"https://cloud.ibm.com/docs/Registry?topic=Registry-getting-started"}),"Container Registry")," documentation."),Object(a.b)("p",null,"A Docker image is the basis for every container that you create. An image is created from a Dockerfile, which is a file that contains instructions to build the image. A Dockerfile might reference build artifacts in its instructions that are stored separately, such as an app, the app’s configuration, and its dependencies. Images are typically stored in a registry that can either be accessible by the public (public registry) or set up with limited access for a small group of users (private registry). By using IBM Cloud Container Registry, only users with access to your IBM Cloud account can access your images."),Object(a.b)("p",null,"Lets use the same application from the previous patterns to containerize it creating a Docker image for it. Start creating a ",Object(a.b)("inlineCode",{parentName:"p"},"Dockerfile")," with the following content in a directory for this project (i.e. ",Object(a.b)("inlineCode",{parentName:"p"},"containers"),")."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-Dockerfile",metastring:"path=Dockerfile",path:"Dockerfile"}),'FROM node:13\n\nRUN npm install -g json-server\n\nWORKDIR /app\nVOLUME /data\n\nEXPOSE 8080\n\nCMD [ "json-server", "--watch", "/data/db.min.json", "--port", "8080", "--host", "0.0.0.0" ]\n')),Object(a.b)("p",null,"Copy to the ",Object(a.b)("inlineCode",{parentName:"p"},"data")," folder the JSON database then you are ready to verify it’s working locally running the following commands."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"docker build -t movies .\ndocker images\n\ndocker run --name movies -d --rm -p 80:8080 -v $PWD/data:/data movies\n\ncurl http://localhost/movies/675\n\ndocker stop $(docker ps -q --filter name=movies)\n")),Object(a.b)("p",null,"To create an ICR namespace we can use the IBM Cloud CLI with the ",Object(a.b)("inlineCode",{parentName:"p"},"container-registry")," plugin. Make sure you have the latest version installed and you have ",Object(a.b)("a",i({parentName:"p"},{href:"/cloud-enterprise-examples/iac/setup-environment"}),"setup the environment")," correctly."),Object(a.b)("p",null,"Use the sub-command ",Object(a.b)("inlineCode",{parentName:"p"},"namespace-add")," to create the new namespace. Assuming the name is ",Object(a.b)("inlineCode",{parentName:"p"},"iac-registry")," use the following commands:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"ibmcloud cr namespace-list\nibmcloud cr namespace-add iac-registry\n")),Object(a.b)("p",null,"Setup the image so you can push it into the namespace registry, for this you have to build or tag the image using the name/tag: ",Object(a.b)("inlineCode",{parentName:"p"},"REGION.icr.io/NAMESPACE/IMAGE:TAG"),". Use the sub-command ",Object(a.b)("inlineCode",{parentName:"p"},"region")," to know the registry region you are targeting, like this:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"ibmcloud cr region\n")),Object(a.b)("p",null,"In my case I’m using region ",Object(a.b)("inlineCode",{parentName:"p"},"us")," so the registry is ",Object(a.b)("inlineCode",{parentName:"p"},"us.icr.io"),". The namespace is ",Object(a.b)("inlineCode",{parentName:"p"},"iac-registry"),", the image name is ",Object(a.b)("inlineCode",{parentName:"p"},"movies")," and the tag ",Object(a.b)("inlineCode",{parentName:"p"},"1.0"),", so it would be like this ",Object(a.b)("inlineCode",{parentName:"p"},"us.icr.io/iac-registry/movies:1.0"),". We already built the image we’ll tag or rename the image with the command ",Object(a.b)("inlineCode",{parentName:"p"},"tag"),", like in the following example. Check the ",Object(a.b)("a",i({parentName:"p"},{href:"https://docs.docker.com/engine/reference/commandline/build/#tag-an-image--t"}),"Docker run")," documentation about how to set the image name or tag:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"docker images\ndocker tag movies us.icr.io/iac-registry/movies:1.0\n")),Object(a.b)("p",null,"Before pushing the image to the registry it’s required to login to the ICR with the ",Object(a.b)("inlineCode",{parentName:"p"},"login")," sub-command, like so:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"ibmcloud cr login\n")),Object(a.b)("p",null,"Having this done, we are ready to push the image with the Docker command ",Object(a.b)("inlineCode",{parentName:"p"},"push"),":"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"docker push us.icr.io/iac-registry/movies:1.0\n")),Object(a.b)("p",null,"You can check the image is there in different ways: (1) listing the images in the registry with the ",Object(a.b)("inlineCode",{parentName:"p"},"ibmcloud")," command, or (2) using the ",Object(a.b)("inlineCode",{parentName:"p"},"docker")," command to pull the image, either from a different computer or deleting the current image before, like so:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"ibmcloud cr images\n\ndocker rmi us.icr.io/iac-registry/movies:1.0\ndocker pull us.icr.io/iac-registry/movies:1.0\ndocker images\n")),Object(a.b)("p",null,"This image is ready also to be executed by someone else with access to the ICR, they just need to execute the following ",Object(a.b)("inlineCode",{parentName:"p"},"docker")," command:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"docker run --name movies -d --rm -p 80:8080 -v $PWD/data:/data us.icr.io/iac-registry/movies:1.0\n")),Object(a.b)("p",null,"where the movies database in JSON to expose is located in ",Object(a.b)("inlineCode",{parentName:"p"},"./data/db.min.json"),"."),Object(a.b)("p",null,"If your job is to have the Docker image published in a container registry then you can stop here, however most of the time we plan to do something with this Docker image such as run it locally (i.e. development or testing) or run it on a container orchestrator such as Docker Swarm or Kubernetes."),Object(a.b)("h2",null,"IBM Cloud Kubernetes Service"),Object(a.b)("p",null,"IBM Cloud Kubernetes Service (IKS) is a managed offering to create your own Kubernetes cluster to deploy and manage containerized apps. In this section you will create a Kubernetes cluster and deploy a simple API application using IBM Cloud CLI, Terraform and Schematics. It’s not the scope of this section to explain how to manage Kubernetes and deployments."),Object(a.b)("p",null,"As always, confirm you have ",Object(a.b)("a",i({parentName:"p"},{href:"/cloud-enterprise-examples/iac/setup-environment"}),"setup the environment")," correctly and installed the latest version of IBM Cloud plugin ",Object(a.b)("inlineCode",{parentName:"p"},"kubernetes-service"),"."),Object(a.b)("p",null,"To create a Kubernetes cluster using the IBM Cloud CLI you need some input parameters such as zone and worker node flavors. Get them with the following commands. In this example, we are using Zone ",Object(a.b)("inlineCode",{parentName:"p"},"us-south-1")," and workers node flavor ",Object(a.b)("inlineCode",{parentName:"p"},"cx2.2x4"),"."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"ibmcloud ks zone ls --provider vpc-gen2 --show-flavors\nZONE=us-south-1\nibmcloud ks flavors --provider vpc-gen2 --zone $ZONE\nFLAVOR=cx2.2x4\n")),Object(a.b)("p",null,"You also need a VPC and Subnet to create the Kubernetes cluster there. If you don’t have them you can also use the IBM Cloud CLI to create them, like so:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),'# VPC Name: iac-iks-vpc\nibmcloud is vpc-create iac-iks-vpc\nVPC_ID=$(ibmcloud is vpcs --json | jq -r ".[] | select(.name==\\"$VPC_Name\\").id")\n\n# Subnet Name iac-iks-subnet and 16 IP addresses.\nibmcloud is subnet-create iac-iks-subnet $VPC_ID --zone $ZONE --ipv4-address-count 16\nSUBNET_ID=$(ibmcloud is subnets --json | jq -r ".[] | select(.name==\\"$Subnet_Name\\").id")\n')),Object(a.b)("p",null,"The new subnet requires to allow traffic to the worker nodes, you can also do that with the IBM Cloud CLI using these commands:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),'ibmcloud is security-group-create iac-iks-sg $VPC_ID    # Security Group Name: iac-iks-sg\nSG_ID=$(ibmcloud is security-groups --json | jq -r ".[] | select(.name==\\"$SG_Name\\").id")\n\nibmcloud is security-group-rule-add $SG_ID inbound tcp --port-min 30000 --port-max 32767\n')),Object(a.b)("p",null,"If you already have a VPC and Subnets, get their IDs with the following ",Object(a.b)("inlineCode",{parentName:"p"},"ibmcloud ks")," sub-commands:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"ibmcloud ks vpcs --provider vpc-gen2        # VPC Name: iac-iks-vpc\nVPC_ID=$(ibmcloud ks vpcs --provider vpc-gen2 --json | jq -r '.[] | select(.name==\"iac-iks-vpc\").id')\n\nibmcloud ks subnets --provider vpc-gen2 --vpc-id $VPC_ID --zone $ZONE   # Subnet Name: iac-iks-subnet\nSUBNET_ID=$(ibmcloud ks subnets --provider vpc-gen2 --vpc-id $VPC_ID --zone $ZONE --json | jq -r '.[] | select(.name==\"iac-iks-subnet\").id')\n")),Object(a.b)("p",null,"The available Kubernetes versions to install are listed with the command ",Object(a.b)("inlineCode",{parentName:"p"},"ibmcloud ks versions"),". Having your input parameters you are ready to create the cluster using the ",Object(a.b)("inlineCode",{parentName:"p"},"cluster create")," sub-command, like this:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"NAME=iac-iks-cluster\nVERSION=1.18.2\n\nibmcloud ks cluster create vpc-gen2 \\\n  --name $NAME \\\n  --zone $ZONE \\\n  --vpc-id $VPC_ID \\\n  --subnet-id $SUBNET_ID \\\n  --flavor $FLAVOR \\\n  --version $VERSION \\\n  # --workers $N \\\n  # --entitlement cloud_pak \\\n  # --service-subnet $SUBNET_CIDR \\\n  # --pod-subnet $POD_CIDR \\\n  # --disable-public-service-endpoint \\\n")),Object(a.b)("p",null,"The default values for the optional parameters are:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"N"),": 1, this is a one worker node cluster."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"SUBNET_CIDR"),": 172.21.0.0/16"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"POD_CIDR"),": 172.30.0.0/16"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"disable-public-service-endpoint"),": false")),Object(a.b)("p",null,"To identify your Kubernetes cluster status use the command ",Object(a.b)("inlineCode",{parentName:"p"},"ibmcloud ks clusters"),", wait a few minutes to have it up and running."),Object(a.b)("p",null,"When the Kubernetes cluster state is ",Object(a.b)("inlineCode",{parentName:"p"},"normal")," get the configuration to access the cluster using the following command:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"ibmcloud ks cluster config --cluster $NAME\n")),Object(a.b)("p",null,"Now you are ready to use the ",Object(a.b)("inlineCode",{parentName:"p"},"kubectl")," command, these are some initial commands:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"kubectl cluster-info\nkubectl get nodes\n")),Object(a.b)("p",null,"You can know more information of the cluster with the commands:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"ibmcloud ks worker ls --cluster $NAME\nibmcloud ks cluster get --cluster $NAME\n")),Object(a.b)("p",null,"To know more read the ",Object(a.b)("a",i({parentName:"p"},{href:"https://cloud.ibm.com/docs/containers?topic=containers-getting-started"}),"Kubernetes Service (IKS)")," documentation."),Object(a.b)("h2",null,"IKS with Terraform"),Object(a.b)("p",null,"All the same actions executed with the IBM Cloud CLI has to be done with Terraform, lets create a new ",Object(a.b)("inlineCode",{parentName:"p"},"main.tf")," file with the IBM Provisioner using Gen 2, the given region and the data source to get the info of the user selected resource group."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-hcl",metastring:"path=main.tf",path:"main.tf"}),'provider "ibm" {\n  generation = 2\n  region     = var.region\n}\n\ndata "ibm_resource_group" "group" {\n  name = var.resource_group\n}\n')),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"variables.tf")," file defines the required variables above, the project name and environment to use them as prefix to name the resources, the code would be like this:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-hcl",metastring:"path=variables.tf",path:"variables.tf"}),'variable "project_name" {}\nvariable "environment" {}\n\nvariable "resource_group" {\n  default = "Default"\n}\nvariable "region" {\n  default = "us-south"\n}\n')),Object(a.b)("p",null,"To not have to enter the variables every time we execute terraform, lets add some variables value to the ",Object(a.b)("inlineCode",{parentName:"p"},"terraform.tfvars")," file. Make sure this file is appended to the ",Object(a.b)("inlineCode",{parentName:"p"},".gitignore")," file."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-hcl",metastring:"path=terraform.tfvars",path:"terraform.tfvars"}),'project_name = "iac-iks-test"\nenvironment  = "dev"\n\n# Optional variables\nresource_group = "Default"\nregion         = "us-south"\n')),Object(a.b)("p",null,"The IKS clusters needs a VPC, Subnet(s) and Security Group(s) just like we did using the IBM Cloud CLI. This time we’ll create a VPC and multiple subnets, then one security group per subnet allowing inbound traffic to ports 30000 - 32767. Same as you did on ",Object(a.b)("a",i({parentName:"p"},{href:"/cloud-enterprise-examples/e03bc2f7b61a09c3f6456227400cfb66/index.mdx"}),"Network")," and ",Object(a.b)("a",i({parentName:"p"},{href:"/cloud-enterprise-examples/961458b1f6952f986ffd07da84db2d0a/index.mdx"}),"Compute")," the number of subnets is defined by the number of zones provided by the user. Lets code this in the ",Object(a.b)("inlineCode",{parentName:"p"},"network.tf")," file and append the following variables to ",Object(a.b)("inlineCode",{parentName:"p"},"variables.tf"),"."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-hcl",metastring:"path=network.tf",path:"network.tf"}),'resource "ibm_is_vpc" "iac_iks_vpc" {\n  name = "${var.project_name}-${var.environment}-vpc"\n}\n\nresource "ibm_is_subnet" "iac_iks_subnet" {\n  count                    = local.max_size\n  name                     = "${var.project_name}-${var.environment}-subnet-${format("%02s", count.index)}"\n  zone                     = var.vpc_zone_names[count.index]\n  vpc                      = ibm_is_vpc.iac_iks_vpc.id\n  total_ipv4_address_count = 256\n  resource_group           = data.ibm_resource_group.group.id\n}\n\nresource "ibm_is_security_group" "iac_iks_security_group" {\n  name           = "${var.project_name}-${var.environment}-sg-public"\n  vpc            = ibm_is_vpc.iac_iks_vpc.id\n  resource_group = data.ibm_resource_group.group.id\n}\n\nresource "ibm_is_security_group_rule" "iac_iks_security_group_rule_tcp_k8s" {\n  count     = local.max_size\n  group     = ibm_is_security_group.iac_iks_security_group.id\n  direction = "inbound"\n  remote    = ibm_is_subnet.iac_iks_subnet[count.index].ipv4_cidr_block\n\n  tcp {\n    port_min = 30000\n    port_max = 32767\n  }\n}\n')),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-hcl",metastring:"path=variables.tf",path:"variables.tf"}),'  ...\nvariable "vpc_zone_names" {\n  type    = list(string)\n  default = ["us-south-1", "us-south-2", "us-south-3"]\n}\n\nlocals {\n  max_size = length(var.vpc_zone_names)\n}\n')),Object(a.b)("p",null,"Last but not least, create the ",Object(a.b)("inlineCode",{parentName:"p"},"iks.tf")," file to define the IKS cluster using the ",Object(a.b)("inlineCode",{parentName:"p"},"ibm_container_vpc_cluster")," resource. The following code also takes the Kubernetes version, worker nodes flavor and number from the variables ",Object(a.b)("inlineCode",{parentName:"p"},"k8s_version"),", ",Object(a.b)("inlineCode",{parentName:"p"},"flavor")," and ",Object(a.b)("inlineCode",{parentName:"p"},"workers_count"),", so lets add them to the ",Object(a.b)("inlineCode",{parentName:"p"},"variables.tf")," file."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-hcl",metastring:"path=iks.tf",path:"iks.tf"}),'resource "ibm_container_vpc_cluster" "iac_iks_cluster" {\n  name              = "${var.project_name}-${var.environment}-cluster"\n  vpc_id            = ibm_is_vpc.iac_iks_vpc.id\n  flavor            = var.flavor\n  worker_count      = var.workers_count[0]\n  kube_version      = var.k8s_version\n  resource_group_id = data.ibm_resource_group.group.id\n  zones {\n    name      = var.vpc_zone_names[0]\n    subnet_id = ibm_is_subnet.iac_iks_subnet[0].id\n  }\n}\n')),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-hcl",metastring:"path=variables.tf",path:"variables.tf"}),'  ...\nvariable "flavor" {\n  default = "cx2.2x4"\n}\nvariable "workers_count" {\n  default = 3\n}\nvariable "k8s_version" {\n  default = "1.18.2"\n}\n')),Object(a.b)("p",null,"This will create a Kubernetes cluster of 3 worker nodes with 2 CPU and 4 Gb Memory. To know the available flavors in the zone, use the following IBM Cloud CLI command:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"ibmcloud ks zone ls --provider vpc-gen2 --show-flavors\n\n# Or\nZONE=us-south-1\nibmcloud ks flavors --provider vpc-gen2 --zone $ZONE\n")),Object(a.b)("p",null,"To sort them by CPU and memory, use the same command with ",Object(a.b)("inlineCode",{parentName:"p"},"sort"),":"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"ZONE=us-south-1\nibmcloud ks flavors --provider vpc-gen2 --zone $ZONE -s | sort -k2 -k3 -n\n")),Object(a.b)("p",null,"The main input parameters of the ",Object(a.b)("inlineCode",{parentName:"p"},"ibm_container_vpc_cluster")," resource are listed in the following table:"),Object(a.b)("table",null,Object(a.b)("thead",{parentName:"table"},Object(a.b)("tr",{parentName:"thead"},Object(a.b)("th",i({parentName:"tr"},{align:null}),"Input parameter"),Object(a.b)("th",i({parentName:"tr"},{align:null}),"Description"))),Object(a.b)("tbody",{parentName:"table"},Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"name")),Object(a.b)("td",i({parentName:"tr"},{align:null}),"name of the cluster")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"vpc_id")),Object(a.b)("td",i({parentName:"tr"},{align:null}),"ID of the VPC that you want to use for your cluster")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"flavor")),Object(a.b)("td",i({parentName:"tr"},{align:null}),"flavor of the VPC worker node")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"zones")),Object(a.b)("td",i({parentName:"tr"},{align:null}),"nested block describing the zones of this VPC cluster")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"zones.name")),Object(a.b)("td",i({parentName:"tr"},{align:null}),"name of the zone")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"zones.subnet_id")),Object(a.b)("td",i({parentName:"tr"},{align:null}),"subnet in the zone to assign the cluster")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"worker_count")),Object(a.b)("td",i({parentName:"tr"},{align:null}),"(optional) number of worker nodes per zone in the default worker pool. Default value ",Object(a.b)("inlineCode",{parentName:"td"},"1"))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"kube_version")),Object(a.b)("td",i({parentName:"tr"},{align:null}),"(optional) Kubernetes version, including the major.minor version. If not set, the default version from ",Object(a.b)("inlineCode",{parentName:"td"},"ibmcloud ks versions")," is used")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"resource_group_id")),Object(a.b)("td",i({parentName:"tr"},{align:null}),"(optional) ID of the resource group. Defaults to ",Object(a.b)("inlineCode",{parentName:"td"},"default"))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"wait_till")),Object(a.b)("td",i({parentName:"tr"},{align:null}),"(optional) marks the creation of your cluster complete when the given stage is achieved, read below to know the available stages and how this can help you speed up the terraform execution")),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"disable_public_service_endpoint")),Object(a.b)("td",i({parentName:"tr"},{align:null}),"(optional) disable the master public service endpoint to prevent public access. Defaults to ",Object(a.b)("inlineCode",{parentName:"td"},"true"))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"pod_subnet")),Object(a.b)("td",i({parentName:"tr"},{align:null}),"(optional) subnet CIDR to provide private IP addresses for pods. Defaults to ",Object(a.b)("inlineCode",{parentName:"td"},"172.30.0.0/16"))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"service_subnet")),Object(a.b)("td",i({parentName:"tr"},{align:null}),"(optional) subnet CIDR to provide private IP addresses for services. Defaults to ",Object(a.b)("inlineCode",{parentName:"td"},"172.21.0.0/16"))),Object(a.b)("tr",{parentName:"tbody"},Object(a.b)("td",i({parentName:"tr"},{align:null}),Object(a.b)("inlineCode",{parentName:"td"},"tags")),Object(a.b)("td",i({parentName:"tr"},{align:null}),"(optional) list of tags to associate with your cluster")))),Object(a.b)("p",null,"The creation of a cluster can take some minutes to complete. To avoid long wait times, you can specify the stage when you want Terraform to mark the cluster resource creation as completed. The cluster creation might not be fully completed and continues to run in the background, however this can help you to continue with the code execution without waiting for the cluster to be fully created."),Object(a.b)("p",null,"To set the waiting stage, use the ",Object(a.b)("inlineCode",{parentName:"p"},"wait_till")," with one of the following stages:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"MasterNodeReady"),": Terraform marks the creation of your cluster complete when the cluster master is in a ready state."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"OneWorkerNodeReady"),": Waits until the master and at least one worker node are in a ready state."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"IngressReady"),": Waits until the cluster master and all worker nodes are in a ready state, and the Ingress subdomain is fully set up. This is the default value.")),Object(a.b)("p",null,"This would be enough to have an IKS cluster running. Just need to execute ",Object(a.b)("inlineCode",{parentName:"p"},"terraform apply"),", however lets create workers pools, one in each subnet or zone, using the resource ",Object(a.b)("inlineCode",{parentName:"p"},"ibm_container_vpc_worker_pool"),". Replace the code in ",Object(a.b)("inlineCode",{parentName:"p"},"iks.tf")," file for the following code and modify the variables used for the number of workers and its flavor."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-hcl",metastring:"path=iks.tf",path:"iks.tf"}),'resource "ibm_container_vpc_cluster" "iac_iks_cluster" {\n  name              = "${var.project_name}-${var.environment}-cluster"\n  vpc_id            = ibm_is_vpc.iac_iks_vpc.id\n  flavor            = var.flavors[0]\n  worker_count      = var.workers_count[0]\n  kube_version      = var.k8s_version\n  resource_group_id = data.ibm_resource_group.group.id\n  wait_till         = "OneWorkerNodeReady"\n  zones {\n    name      = var.vpc_zone_names[0]\n    subnet_id = ibm_is_subnet.iac_iks_subnet[0].id\n  }\n}\n\nresource "ibm_container_vpc_worker_pool" "iac_iks_cluster_pool" {\n  count             = local.max_size - 1\n  cluster           = ibm_container_vpc_cluster.iac_iks_cluster.id\n  worker_pool_name  = "${var.project_name}-${var.environment}-wp-${format("%02s", count.index + 1)}"\n  flavor            = var.flavors[count.index + 1]\n  vpc_id            = ibm_is_vpc.iac_iks_vpc.id\n  worker_count      = var.workers_count[count.index + 1]\n  resource_group_id = data.ibm_resource_group.group.id\n  zones {\n    name      = var.vpc_zone_names[count.index + 1]\n    subnet_id = ibm_is_subnet.iac_iks_subnet[count.index + 1].id\n  }\n}\n')),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-hcl",metastring:"path=variables.tf",path:"variables.tf"}),'variable "flavors" {\n  type    = list(string)\n  default = ["cx2.2x4", "cx2.4x8", "cx2.8x16"]\n}\nvariable "workers_count" {\n  type    = list(number)\n  default = [3, 2, 1]\n}\n')),Object(a.b)("p",null,"The main input parameters for the ",Object(a.b)("inlineCode",{parentName:"p"},"ibm_container_vpc_worker_pool")," resource are similar to the parameters for ",Object(a.b)("inlineCode",{parentName:"p"},"ibm_container_vpc_cluster")," except for ",Object(a.b)("inlineCode",{parentName:"p"},"worker_pool_name")," to name the pool and ",Object(a.b)("inlineCode",{parentName:"p"},"cluster")," with the name or ID of the cluster set this pool."),Object(a.b)("p",null,"Using a file ",Object(a.b)("inlineCode",{parentName:"p"},"output.tf")," helps us to get some useful information about the cluster through output variables, like so."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-hcl",metastring:"path=output.tf",path:"output.tf"}),"")),Object(a.b)("p",null,"Now everything is ready to create the cluster with the wellknown Terraform commands:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"terraform plan\nterraform apply\n")),Object(a.b)("p",null,"After having the cluster ready, you can use the IBM Cloud CLI to get the cluster configuration to setup ",Object(a.b)("inlineCode",{parentName:"p"},"kubectl"),", like so:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"ibmcloud ks cluster config --cluster $(terraform output cluster_id)\n")),Object(a.b)("p",null,"Enjoy the new cluster, here are some basic initial commands to verify the cluster is working"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"kubectl cluster-info\nkubectl get nodes\nkubectl get pods -A\n")),Object(a.b)("h3",null,"A simpler IKS cluster"),Object(a.b)("p",null,"For simplicity and creation speed, lets modify the ",Object(a.b)("inlineCode",{parentName:"p"},"terraform.tfvars")," to have a simpler cluster with one single node. This will help us to have the cluster quicker."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-hcl",metastring:"path=terraform.tfvars",path:"terraform.tfvars"}),'project_name = "iac-iks-small-OWNER"\nenvironment  = "dev"\n\n# Optional variables\nresource_group = "Default"\nregion         = "us-south"\nvpc_zone_names = ["us-south-1"]\nflavors        = ["cx2.2x4"]\nworkers_count  = [1]\nk8s_version    = "1.18.2"\n')),Object(a.b)("p",null,"Executing ",Object(a.b)("inlineCode",{parentName:"p"},"terraform plan & terraform apply")," will get an IKS cluster up and running quicker than before."),Object(a.b)("h2",null,"IKS with IBM Cloud Schematics"),Object(a.b)("p",null,"Running this code with IBM Cloud Schematics is the same as with the other patterns. Create the ",Object(a.b)("inlineCode",{parentName:"p"},"workspace.json")," file adding the variables required for this code, like this one:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-json",metastring:"path=workspace.json",path:"workspace.json"}),'{\n  "name": "iac_iks_test",\n  "type": [\n    "terraform_v0.12"\n  ],\n  "description": "Sample workspace to test IBM Cloud Schematics. Deploys an web server on a VSI with a Hello World response",\n  "tags": [\n    "app:iac_iks_test",\n    "owner:OWNER",\n    "env:dev"\n  ],\n  "template_repo": {\n    "url": "https://github.com/IBM/cloud-enterprise-examples/tree/master/iac/09-containers"\n  },\n  "template_data": [{\n    "folder": ".",\n    "type": "terraform_v0.12",\n    "variablestore": [{\n        "name": "project_name",\n        "value": "iac-iks-test-OWNER",\n        "type": "string"\n      },\n      {\n        "name": "environment",\n        "value": "dev",\n        "type": "string"\n      },\n      {\n        "name": "region",\n        "value": "us-south",\n        "type": "string"\n      },\n      {\n        "name": "vpc_zone_names",\n        "value": ["us-south-1", "us-south-2", "us-south-3"],\n        "type": "list(string)"\n      },\n      {\n        "name": "flavors",\n        "value": ["cx2.2x4", "cx2.4x8", "cx2.8x16"],\n        "type": "list(string)"\n      },\n      {\n        "name": "workers_count",\n        "value": [3, 2, 1],\n        "type": "list(number)"\n      },\n      {\n        "name": "k8s_version",\n        "value": "1.18.2",\n        "type": "string"\n      }\n    ]\n  }]\n}\n')),Object(a.b)("p",null,"To create the workspace using the IBM Cloud CLI execute the following commands:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"ibmcloud schematics workspace new --file workspace.json\nibmcloud schematics workspace list          # Identify the WORKSPACE_ID\nWORKSPACE_ID=\n")),Object(a.b)("p",null,"Set the variable “ because it’ll be used several times. Then plan and apply the code like so."),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"ibmcloud schematics plan --id $WORKSPACE_ID  # Identify the Activity_ID\nibmcloud schematics logs  --id $WORKSPACE_ID --act-id Activity_ID\n\nibmcloud schematics apply --id $WORKSPACE_ID # Identify the Activity_ID\nibmcloud schematics logs  --id $WORKSPACE_ID --act-id Activity_ID\n")),Object(a.b)("p",null,"Note the execution of apply will take some time, so check the logs either with the IBM Cloud CLI command or using the IBM Cloud Web Console."),Object(a.b)("h2",null,"Deploy the Application"),Object(a.b)("p",null,"To deploy the previously built Docker image we use the Kubernetes API and resources. Lets create a deployment file either by getting it from the following example or generating it with kubectl generators, like so:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"mkdir kubernetes\nkubectl create deployment movies --image=us.icr.io/iac-registry/movies:1.0 --dry-run=client -o yaml > kubernetes/deployment.yaml\nkubectl create service nodeport movies --tcp=8080 --node-port=32000 --dry-run=client -o yaml > kubernetes/service.yaml\n")),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-yaml",metastring:"path=kubernetes/deployment.yaml",path:"kubernetes/deployment.yaml"}),"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: movies\n  name: movies\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: movies\n  template:\n    metadata:\n      labels:\n        app: movies\n    spec:\n      containers:\n        - image: us.icr.io/iac-registry/movies:1.0\n          name: movies\n")),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-yaml",metastring:"path=kubernetes/service.yaml",path:"kubernetes/service.yaml"}),'apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: movies\n  name: movies\nspec:\n  ports:\n    - name: "80"\n      nodePort: 32000\n      port: 80\n      protocol: TCP\n      targetPort: 80\n  selector:\n    app: movies\n  type: NodePort\nstatus:\n  loadBalancer: {}\n')),Object(a.b)("p",null,"To deploy the application execute the ",Object(a.b)("inlineCode",{parentName:"p"},"kubectl apply")," command like this:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"kubectl apply -f kubernetes\n")),Object(a.b)("h2",null,"Final Code"),Object(a.b)("p",null,"All the code used for this pattern is located and available to download in the GitHub repository ",Object(a.b)("a",i({parentName:"p"},{href:"https://github.com/IBM/cloud-enterprise-examples/"}),"https://github.com/IBM/cloud-enterprise-examples/")," in the directory ",Object(a.b)("a",i({parentName:"p"},{href:"https://github.com/IBM/cloud-enterprise-examples/tree/master/iac/09-containers"}),"09-containers")," where the main files are:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-hcl",metastring:"path=network.tf",path:"network.tf"}),'resource "ibm_is_vpc" "iac_iks_vpc" {\n  name = "${var.project_name}-${var.environment}-vpc"\n}\n\nresource "ibm_is_subnet" "iac_iks_subnet" {\n  count                    = local.max_size\n  name                     = "${var.project_name}-${var.environment}-subnet-${format("%02s", count.index)}"\n  zone                     = var.vpc_zone_names[count.index]\n  vpc                      = ibm_is_vpc.iac_iks_vpc.id\n  total_ipv4_address_count = 256\n  resource_group           = data.ibm_resource_group.group.id\n}\n\nresource "ibm_is_security_group" "iac_iks_security_group" {\n  name           = "${var.project_name}-${var.environment}-sg-public"\n  vpc            = ibm_is_vpc.iac_iks_vpc.id\n  resource_group = data.ibm_resource_group.group.id\n}\n\nresource "ibm_is_security_group_rule" "iac_iks_security_group_rule_tcp_k8s" {\n  count     = local.max_size\n  group     = ibm_is_security_group.iac_iks_security_group.id\n  direction = "inbound"\n  remote    = ibm_is_subnet.iac_iks_subnet[count.index].ipv4_cidr_block\n\n  tcp {\n    port_min = 30000\n    port_max = 32767\n  }\n}\n')),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-hcl",metastring:"path=iks.tf",path:"iks.tf"}),'resource "ibm_container_vpc_cluster" "iac_iks_cluster" {\n  name              = "${var.project_name}-${var.environment}-cluster"\n  vpc_id            = ibm_is_vpc.iac_iks_vpc.id\n  flavor            = var.flavors[0]\n  worker_count      = var.workers_count[0]\n  kube_version      = var.k8s_version\n  resource_group_id = data.ibm_resource_group.group.id\n  wait_till         = "OneWorkerNodeReady"\n  zones {\n    name      = var.vpc_zone_names[0]\n    subnet_id = ibm_is_subnet.iac_iks_subnet[0].id\n  }\n}\n\nresource "ibm_container_vpc_worker_pool" "iac_iks_cluster_pool" {\n  count             = local.max_size - 1\n  cluster           = ibm_container_vpc_cluster.iac_iks_cluster.id\n  worker_pool_name  = "${var.project_name}-${var.environment}-wp-${format("%02s", count.index + 1)}"\n  flavor            = var.flavors[count.index + 1]\n  vpc_id            = ibm_is_vpc.iac_iks_vpc.id\n  worker_count      = var.workers_count[count.index + 1]\n  resource_group_id = data.ibm_resource_group.group.id\n  zones {\n    name      = var.vpc_zone_names[count.index + 1]\n    subnet_id = ibm_is_subnet.iac_iks_subnet[count.index + 1].id\n  }\n}\n')),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-hcl",metastring:"path=variables.tf",path:"variables.tf"}),'variable "project_name" {}\nvariable "environment" {}\n\nvariable "resource_group" {\n  default = "Default"\n}\nvariable "region" {\n  default = "us-south"\n}\nvariable "vpc_zone_names" {\n  type    = list(string)\n  default = ["us-south-1", "us-south-2", "us-south-3"]\n}\nvariable "flavors" {\n  type    = list(string)\n  default = ["cx2.2x4", "cx2.4x8", "cx2.8x16"]\n}\nvariable "workers_count" {\n  type    = list(number)\n  default = [3, 2, 1]\n}\nvariable "k8s_version" {\n  default = "1.18.2"\n}\n\nlocals {\n  max_size = length(var.vpc_zone_names)\n}\n')),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-Dockerfile",metastring:"path=Dockerfile",path:"Dockerfile"}),'FROM node:13\n\nRUN npm install -g json-server\n\nWORKDIR /app\nVOLUME /data\n\nEXPOSE 8080\n\nCMD [ "json-server", "--watch", "/data/db.min.json", "--port", "8080", "--host", "0.0.0.0" ]\n')),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-yaml",metastring:"path=kubernetes/deployment.yaml",path:"kubernetes/deployment.yaml"}),"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: movies\n  name: movies\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: movies\n  template:\n    metadata:\n      labels:\n        app: movies\n    spec:\n      containers:\n        - image: us.icr.io/iac-registry/movies:1.0\n          name: movies\n")),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-yaml",metastring:"path=kubernetes/service.yaml",path:"kubernetes/service.yaml"}),'apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: movies\n  name: movies\nspec:\n  ports:\n    - name: "80"\n      nodePort: 32000\n      port: 80\n      protocol: TCP\n      targetPort: 80\n  selector:\n    app: movies\n  type: NodePort\nstatus:\n  loadBalancer: {}\n')),Object(a.b)("h2",null,"Clean up"),Object(a.b)("p",null,"When you are done with the Kubernetes cluster should destroy it."),Object(a.b)("p",null,"If the cluster was created ",Object(a.b)("strong",{parentName:"p"},"using the IBM Cloud CLI"),", execute the following commands:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),'NAME=iac-iks-cluster\nibmcloud ks cluster rm --cluster $NAME\n\nSG_Name=iac-iks-sg\nSG_ID=$(ibmcloud is security-groups --json | jq -r ".[] | select(.name==\\"$SG_Name\\").id")\nibmcloud is security-group-delete $SG_ID\n\nSubnet_Name=iac-iks-subnet\nSUBNET_ID=$(ibmcloud is subnets --json | jq -r ".[] | select(.name==\\"$Subnet_Name\\").id")\nibmcloud is subnet-delete $SUBNET_ID\n\nVPC_Name=iac-iks-vpc\nVPC_ID=$(ibmcloud is vpcs --json | jq -r ".[] | select(.name==\\"$VPC_Name\\").id")\nibmcloud is vpc-delete $VPC_Name\n')),Object(a.b)("p",null,"If the cluster was created ",Object(a.b)("strong",{parentName:"p"},"using Terraform"),", just need to execute the command:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"terraform destroy\n")),Object(a.b)("p",null,"And, if the cluster was created ",Object(a.b)("strong",{parentName:"p"},"using IBM Cloud Schematics"),", execute the following commands:"),Object(a.b)("pre",null,Object(a.b)("code",i({parentName:"pre"},{className:"language-bash"}),"ibmcloud schematics workspace list              # Identify the WORKSPACE_ID\nWORKSPACE_ID=\n\nibmcloud schematics destroy --id $WORKSPACE_ID  # Identify the Activity_ID\nibmcloud schematics logs  --id $WORKSPACE_ID --act-id Activity_ID\n\n# ... wait until it's done\n\nibmcloud schematics workspace delete --id $WORKSPACE_ID\nibmcloud schematics workspace list\n")))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-iac-resources-container-index-mdx-64c332f95724662415d6.js.map